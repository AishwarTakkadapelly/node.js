name: CI/CD Pipeline for Node.js

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull request to the main branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16' # Specify Node.js version

    - name: Install Dependencies
      run: npm install

   # - name: Build
   #   run: npm run build # Adjust if you have a build script

    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
        docker tag ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
      env:
        DOCKER_BUILDKIT: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
        IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
        
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker pull $IMAGE_NAME:$IMAGE_TAG
          docker stop node || true
          docker rm node || true
          docker run -d --name node -p 3333:3333 $IMAGE_NAME:$IMAGE_TAG
        EOF
