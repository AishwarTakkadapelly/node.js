name: CI/CD Pipeline for Node.js Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Build Docker image
      run: docker build -t node .

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image to Docker Hub
      run: docker tag node ${{ secrets.DOCKER_USERNAME }}/node:latest && docker push ${{ secrets.DOCKER_USERNAME }}/node:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install SSH Client
      run: sudo apt-get update -qq && sudo apt-get install -qqy openssh-client

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 400 ~/.ssh/id_rsa

    - name: Deploy to EC2
      env:
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
        IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$EC2_PUBLIC_IP << 'EOF'
          set -e
          # Check if Docker is installed and install it if necessary
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            newgrp docker
          fi

          # Cleanup old containers
          container_ids=$(docker ps -aq)
          sudo docker stop node || true
          sudo docker rm node || true

          # Login to Docker Hub
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

          # Pull and run the new Docker image
          docker pull $IMAGE_NAME:$IMAGE_TAG
          docker run -d --name node -p 3333:3333 $IMAGE_NAME:$IMAGE_TAG
        EOF
